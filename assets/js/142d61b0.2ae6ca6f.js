"use strict";(self.webpackChunklobaro_docs=self.webpackChunklobaro_docs||[]).push([[5907],{4369:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var o=t(4848),r=t(8453);const i={},a="Server Configuration",s={id:"platform/administration/server-configuration",title:"Server Configuration",description:"Server Admin (ssh access required)",source:"@site/docs/platform/administration/server-configuration.md",sourceDirName:"platform/administration",slug:"/platform/administration/server-configuration",permalink:"/iot/platform/administration/server-configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/lobaro/iot/tree/master/docs/platform/administration/server-configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"cloudSidebar",previous:{title:"Server Certificates",permalink:"/iot/platform/administration/server-certificates"},next:{title:"Hosting & Licensing",permalink:"/iot/platform/license/"}},l={},d=[{value:"Commandline and Environment Variables",id:"commandline-and-environment-variables",level:2},{value:"Configuration File",id:"configuration-file",level:2}];function c(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"server-configuration",children:"Server Configuration"}),"\n",(0,o.jsx)(e.admonition,{title:"Required roles",type:"info",children:(0,o.jsx)(e.p,{children:"Server Admin (ssh access required)"})}),"\n",(0,o.jsx)(e.p,{children:"Each value is loaded from different locations (highest priority first, e.g. 1. overrides 2.):"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Environment variables"}),"\n",(0,o.jsx)(e.li,{children:"Config File"}),"\n",(0,o.jsx)(e.li,{children:"Command line Flags"}),"\n",(0,o.jsx)(e.li,{children:"Default values"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"commandline-and-environment-variables",children:"Commandline and Environment Variables"}),"\n",(0,o.jsx)(e.p,{children:"Some options are only available via Environment Variables"}),"\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:"Environment Variable"}),(0,o.jsx)(e.th,{children:"Commandline parameter"}),(0,o.jsx)(e.th,{children:"Description"}),(0,o.jsx)(e.th,{children:"Version"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{}),(0,o.jsx)(e.td,{children:"--config"}),(0,o.jsxs)(e.td,{children:["Defile path of config file (default",":lobaro-iot-platform",".yml)"]}),(0,o.jsx)(e.td,{})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"LOB_JSON_LOGGING=1"}),(0,o.jsx)(e.td,{children:"--json_logging=1"}),(0,o.jsx)(e.td,{children:"Enable JSON Logging"}),(0,o.jsx)(e.td,{children:">= 1.84.1"})]})]})]}),"\n",(0,o.jsx)(e.h2,{id:"configuration-file",children:"Configuration File"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-toml",children:"# This is an generated example config file for the Lobaro Backend\n# On production systems you can change the default values as required\n\n# Enable debug log output\nDebug = false\n# License key for the Lobaro Backend to unlock certain features\nLicense = ''\n# TCP port for Tekelek devices\nTekelekTcpPort = 54345\n# TCP port for Dragino devices\nDraginoTcpPort = 5600\n# DevEUI Blocks for Hardware Provisioning\nDevEUIBlocks = []\n\n# Frontend HTTP Server Configuration\n[Server]\n# Frontend URL without trailing slash (not needed when using a single domain)\nFrontendUrl = ''\n# Port to listen on, deprecated in favour of Bind. When Bins is set Port is ignored\nPort = 0\n# Address to bind to, e.g. :8082\nBind = ':8082'\n# Enable development mode. Not safe for production!\n# Authentication might be disabled.\nDevMode = false\n# Token secret to encrypt API Tokens. When changed, all existing Tokens are invalidated.\nApiTokenSecret = ''\n# Token secret to encrypt User Tokens. When changed, all existing Tokens are invalidated.\nOauthTokenSecret = ''\n# Token secret to encrypt User Refresh Tokens. When changed, all existing Tokens are invalidated.\nOauthRefreshTokenSecret = ''\n# Directory where all file based data is stored\nDataDir = './data'\n\n# DTLS Configuration, used by CoAPs Server\n[Server.DtlsConfig]\nDtlsCertDir = ''\nDtlsCertName = ''\nAcceptPoolSize = 10000\n\n# Customer specific branding configuration\n[Branding]\nPlatformName = 'IoT Platform'\nFrontendBaseUrl = ''\nDefaultLogoUrl = '/static/branding/logo.svg'\nLegalDisclosureUrl = 'https://www.lobaro.com/contact/'\nParserDocUrl = 'https://doc.lobaro.com/x/Y4B5'\nDisplayDocLinks = true\nIntegrationDocUrl = 'https://doc.lobaro.com/x/YIB5'\nAllowRegistration = false\nFavicon = '/static/img/favicon.ico'\n\n# Deprecated: use BrandingConfig\n[Whitelabel]\nPlatformName = ''\n\n# Postgres Database Configuration\n[Database]\nDatabase = 'postgres'\n# Schema for the database, default is public. If empty string the search_path will be determined by the db\nSchema = 'public'\nUsername = 'postgres'\nPassword = 'admin'\nHost = 'localhost'\nPort = 5432\nSslMode = 'disable'\nMaxOpenConns = 90\nMaxIdleConns = 20\n# Enable debug log output for the database\nDebug = false\nAutoFixMigration = false\n# Threshold for slow queries in milliseconds\nSlowQueryThresholdMs = 5000\n\n# Cache Configuration\n[Database.Cache]\n# Expiration time for the device cache in seconds, 0 = no cache\nDeviceExpirationSec = 600\n# Disable the local cache\nLocalCacheDisabled = false\n# Expiration time for the local cache in seconds\nLocalCacheExpirationSec = 3600\n# Purge time for the local cache in seconds\nLocalCachePurgeSec = 3600\n\n# Email Server settings\n[Email]\nServer = ''\nTls = false\nUsername = ''\nPassword = ''\nSender = ''\n\n# CoAP(s) Server Configuration\n[CoapServer]\n# CoAP port\nCoapPort = 5683\n# CoAPs port\nCoapsPort = 5684\n\n# Digimondo Platform specific settings\n[Digimondo]\nApiKey = ''\n\n# MQTT Broker Configuration for outbound MQTT Integrations\n[Mqtt]\nName = ''\nClientId = ''\nBroker = ''\nUsername = ''\nPassword = ''\n\n# Internal MQTT Broker Configuration\n[MqttBrokerConfig]\nStartBroker = false\nAdminUsername = 'admin'\nAdminPassword = 'admin'\n# port used for broker\nPort = 1883\n\n# DevEUI Provisioning Configuration\n[DevEUIConfig]\n# When set to true, the server will assign a new DevEUI when a device with that DevEUI already exists in the platform\nCheckDeviceExistOnNewEui = false\n\n# Allows to enable/disable single features\n[FeatureToggle]\nHardwareActivationEnabled = true\nWmbusParserApiTabEnabled = true\nWmbusParserApiPublic = false\n\n# JavaScript Device Parser Configuration\n[Parser]\nTimeoutMs = 250\n\n# Device Data Storage related Configuration\n[Data]\nDefaultRetentionDuration = ''\n\n# Organisation related Configuration\n[Organisation]\nDefaultUserLimit = 0\nDefaultMaxSubOrganisations = 0\nMaxDepthSubOrganisations = 10\n\n# NATS related Configuration. NATS is used as the internal Message Broker\n[Nats]\n# Start the internal nats server, host has to be localhost then\nStartNatsServer = true\n# NATS server hostname or IP address to connect to\nHost = 'localhost'\n# NATS server port to connect to\nPort = 4222\nUsername = 'admin'\nPassword = 'admin'\nHTTPPort = 8222\n# Enable NATS for CoAP and CoAPs datasource\nEnableCoapDatasource = false\n# Size of the NATS client pool for publishing messages\nClientPoolSize = 1000\n# Hostname or IP address of the config companion\nConfigCompanionHost = 'localhost'\n# Port of the config companion\nConfigCompanionPort = 8099\n# Number of workers for the uplink handler queue\nUplinkHandlerWorkers = 2\n# Number of workers for the integrations queue\nIntegrationHandlerWorkers = 4\n# Maximum memory (RAM) size of JetStream streams in bytes\nJetStreamMaxMemory = 1073741824\n# Maximum memory (disk) usage of JetStream streams in bytes\nJetStreamMaxStore = 0\n# Path to store JetStream data\nJetStreamStoreDirectory = './data/jetstream'\n\n# general Config regarding the REST API offered by the platform\n[RestApiConfig]\nLogBodyOnPanic = false\nLogHttpHeaderOnPanic = false\n\n# Integration related Configuration\n[Integration]\n# Default timeout for MQTT integrations in milliseconds\nMqttDefaultTimeoutMs = 10000\n# Default timeout for HTTP integrations in milliseconds\nHttpDefaultTimeoutMs = 10000\n# Rate limit for updating logging in case if success Seconds, 0 for no limit\nLoggingSuccessRateLimitSeconds = 10\n# Rate limit for updating logging in case of error/failur in Seconds, 0 for no limit\nLoggingErrorRateLimitSeconds = 10\n"})})]})}function f(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>s});var o=t(6540);const r={},i=o.createContext(r);function a(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);