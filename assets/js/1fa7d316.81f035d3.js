"use strict";(self.webpackChunklobaro_docs=self.webpackChunklobaro_docs||[]).push([[2372],{2808:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=t(4848),r=t(8453);const i={draft:!1},s="Parser",o={id:"platform/parser/index",title:"Parser",description:"A Parser is written in JavaScript. It takes raw input from the device and converts the data into a unified format used",source:"@site/docs/platform/parser/index.md",sourceDirName:"platform/parser",slug:"/platform/parser/",permalink:"/iot/platform/parser/",draft:!1,unlisted:!1,editUrl:"https://github.com/lobaro/iot/tree/master/docs/platform/parser/index.md",tags:[],version:"current",frontMatter:{draft:!1},sidebar:"allDocSidebar",previous:{title:"FAQ",permalink:"/iot/platform/faq"},next:{title:"M-Bus Parser",permalink:"/iot/platform/parser/mbus-parser"}},c={},d=[{value:"Parser JavaScript API",id:"parser-javascript-api",level:2},{value:"Helper functions",id:"helper-functions",level:3},{value:"Parser functions",id:"parser-functions",level:3},{value:"Device functions",id:"device-functions",level:3},{value:"Record functions",id:"record-functions",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"parser",children:"Parser"})}),"\n",(0,a.jsx)(n.p,{children:"A Parser is written in JavaScript. It takes raw input from the device and converts the data into a unified format used\nby the Platform.\nIn addition, the parser can access an API to set device level properties and additional meta information outside the\nactual data record."}),"\n",(0,a.jsx)(n.p,{children:"Parsers are attached to every device type and can be overwritten by a single device."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function Parse(input) {\n  var dataStr = atob(input.data);\n  var data = bytes(dataStr);\n \n  // Decode an incoming message to an object of fields.\n  var decoded = {input: input};\n \n  return decoded;\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"parser-javascript-api",children:"Parser JavaScript API"}),"\n",(0,a.jsx)(n.h3,{id:"helper-functions",children:"Helper functions"}),"\n",(0,a.jsx)(n.p,{children:"Functions to cast Types, convert between Hex/Base64/Bytes etc."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Bytes can convert binary data to byte array\n// atob converts Base64 string to byte string\nvar bytes = bytes(atob("aGFsbG8gYmFzZTY0"));\n \n// Convert Base64 to byte array, shortcut for bytes(atob(...))\nvar bytes = parseBase64("aGFsbG8gYmFzZTY0");\n \n// Convert bytes to string\nvar str = string(bytes);\n \n// byte parsing helper\nuint16BE(bytes, idx);\nuint16LE(bytes, idx);\nuint32BE(bytes, idx);\nuint32LE(bytes, idx);\nfloat32LE(bytes, idx);\nfloat32BE(bytes, idx);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"parser-functions",children:"Parser functions"}),"\n",(0,a.jsxs)(n.p,{children:["The global namespace ",(0,a.jsx)(n.code,{children:"Parser"})," contains general functions for using extended parser features."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parse wMbus message\nParser.parseWmbus(bytes);\n \n// Takes bytes of a partial message and a cacheKey\n// In context of the receiving device all data with the same cacheKey\n// is concatinated and the restult returned\n// To start a new message, pass a new cacheKey\nvar joined = Parser.joinPartial(bytes, cacheKey);\n \n// Clears all data with the given cacheKey\n// returns the joined parts that were added by joinPartial before\nvar joined = Parser.clearPartial(cacheKey);\n \n// Equivalent to clearPartial followed by joinPartial\nvar joined = Parser.newPartial(cacheKey);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"device-functions",children:"Device functions"}),"\n",(0,a.jsx)(n.p,{children:"Functions Related to the Device the Parser is executed for."}),"\n",(0,a.jsx)(n.p,{children:"Access device related information"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Read only properties:\nDevice.name // String\nDevice.address // String\nDevice.tags // Array of Strings\nDevice.serial // String\n\n// Update the physical location of the sensor\nDevice.setLocation(lon, lat)\n\n// Set an device config value, displayed on the "Config" tab of the device\nDevice.setConfig("key", "value");\n\n// Set an arbitrary device property, displayed on the "Overview" tab of the device\nDevice.setProperty("key", "value");\n\n// Get Configuration Value by Name  \n// Opearates on a snapshot of values before the parser execution.\n//\n// value is null if if the value is not set.\n// value type is string, number or bool.\n// Byte arrays are encoded as Base64 strings.\nvar value = Device.getConfig("key");\n'})}),"\n",(0,a.jsx)(n.h3,{id:"record-functions",children:"Record functions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"\n// Get the time when the data was received by the server in ms, compatible with new Date(t).\nvar t = Record.getReceivedAt();\n"})}),"\n",(0,a.jsx)(n.p,{children:"Set the measured time based on a field on the result json."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// setTimeField sets the field name from which the time is extracted, and the time format it is written in.\n// The parser will extract it from and set it for each returned (batch) record in the DB.\n// fieldName is the field of the record that contains the time\n// timeFmt is optional and defaults to "UNIXMS"\nRecord.setTimeField(fieldName, timeFmt);\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"fieldName values"})}),"\n",(0,a.jsxs)(n.p,{children:["The field name can be a top level field or a path to the field in the record, e.g. ",(0,a.jsx)(n.code,{children:"path.to.time"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Syntax of the fieldName is handled by gjson, see: ",(0,a.jsx)(n.a,{href:"https://github.com/tidwall/gjson",children:"https://github.com/tidwall/gjson"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"timeFmt values"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"UNIXMS"})," - Unix timestamp in milliseconds"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"UNIXS"})," - Unix timestamp in seconds"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"RFC3339"})," - RFC3339 (ISO 8601) date string"]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{title:"Deprecated",type:"warning",children:(0,a.jsx)(n.p,{children:"setTime is deprecated. Use setTimeField instead.\nsetTime can only set a single time for all results."})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Set the Sensor time (Measured At) of the current data record. Used for display, filter, sorting.\n// The Timestamp must be in JS style and thus in milli seconds\n// Deprecated: Use setTimefield instead\nRecord.setTime(new Date(timestamp_ms));\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);